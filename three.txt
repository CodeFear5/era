MoviesTags
===========
 
1. movie.txt 
movieId,title,genres 
1,Toy Story (1995),Adventure|Animation|Children|Comedy|Fantasy 
2,Jumanji (1995),Adventure|Children|Fantasy 
3,Grumpier Old Men (1995),Comedy|Romance 
4,Waiting to Exhale (1995),Comedy|Drama 
5,Father of the Bride Part II (1995),Comedy 
 
 
 
2. tags.txt 
userId,movieId,tag,timestamp 
1,1,fun,964982703 
1,2,adventure,964981247 
2,1,animated,964982224 
2,3,romantic,964983815 
3,4,drama,964984100 
3,5,comedy,964985000 
 
 
Code: 
import java.io.IOException;
import java.util.*;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Movie {

    // Mapper for movie.txt
    public static class MovieMapper extends Mapper<LongWritable, Text, Text, Text> {
        public void map(LongWritable key, Text value, Context context)
                throws IOException, InterruptedException {

            String line = value.toString();
            // Skip header line
            if (key.get() == 0 && line.contains("movieId")) return;

            String[] fields = line.split(",", 3); // movieId,title,genres
            if (fields.length >= 2) {
                String movieId = fields[0].trim();
                String title = fields[1].trim();
                context.write(new Text(movieId), new Text("MOVIE::" + title));
            }
        }
    }

    // Mapper for tags.txt
    public static class TagMapper extends Mapper<LongWritable, Text, Text, Text> {
        public void map(LongWritable key, Text value, Context context)
                throws IOException, InterruptedException {

            String line = value.toString();
            // Skip header line
            if (key.get() == 0 && line.contains("userId")) return;

            String[] fields = line.split(",", 4); // userId,movieId,tag,timestamp
            if (fields.length >= 3) {
                String movieId = fields[1].trim();
                String tag = fields[2].trim();
                context.write(new Text(movieId), new Text("TAG::" + tag));
            }
        }
    }

    // Reducer to join movie title and tags
    public static class JoinReducer extends Reducer<Text, Text, Text, Text> {
        public void reduce(Text key, Iterable<Text> values, Context context)
                throws IOException, InterruptedException {

            String movieTitle = null;
            List<String> tags = new ArrayList<String>();

            for (Text val : values) {
                String value = val.toString();
                if (value.startsWith("MOVIE::")) {
                    movieTitle = value.substring(7);
                } else if (value.startsWith("TAG::")) {
                    tags.add(value.substring(5));
                }
            }

            if (movieTitle != null && !tags.isEmpty()) {
                // Use StringBuilder to join tags
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < tags.size(); i++) {
                    sb.append(tags.get(i));
                    if (i != tags.size() - 1) sb.append(",");
                }
                String tagList = sb.toString();
                context.write(new Text(movieTitle), new Text(tagList));
            }
        }
    }

    // Main method
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Movie Tags Join");
        job.setJarByClass(Movie.class);

        // Multiple inputs for movie.txt and tags.txt
        MultipleInputs.addInputPath(job, new Path(args[0]), TextInputFormat.class, MovieMapper.class);
        MultipleInputs.addInputPath(job, new Path(args[1]), TextInputFormat.class, TagMapper.class);

        job.setReducerClass(JoinReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);

        FileOutputFormat.setOutputPath(job, new Path(args[2]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}


100% working commands

[cloudera@quickstart ~]$ hdfs dfs -mkdir /movie 
[cloudera@quickstart ~]$ hdfs dfs -mkdir /tag 
[cloudera@quickstart ~]$ cd Desktop 
[cloudera@quickstart Desktop]$ hdfs dfs -copyFromLocal Movie.txt /movie 
[cloudera@quickstart Desktop]$ hdfs dfs -copyFromLocal Tags.txt /tag 
[cloudera@quickstart Desktop]$ hdfs dfs -cat /movie/Movie.txt 
[cloudera@quickstart Desktop]$ hdfs dfs -cat /tag/Tags.txt 

[cloudera@quickstart Desktop]$ hadoop jar MovieTagsJoin.jar MovieTagsJoin /movie /tag 
/user/root/movietag1 
[cloudera@quickstart Desktop]$ hadoop dfs -cat /user/root/movietag1/part-r-00000
